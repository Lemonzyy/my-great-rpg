name: CI

on:
  push:
    tags:
      - 'v[0-9]+.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create_release:
    name: Create release
    runs-on: ubuntu-latest
    # Note this. We are going to use that in further jobs.
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
  release_assets:
    name: Release assets
    needs: create_release # we need to know the upload URL
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-latest
          - os: macos-latest
          - os: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Build
        run: cargo build --release --verbose
      - name: Run tests
        run: cargo test --verbose
      - name: Make the file executable for UNIX and compress it
        if: matrix.config.os != 'windows-latest'
        run: |
          cd ./target/release/
          sudo chmod +x my-great-rpg
          tar zcvf my-great-rpg.tar.gz my-great-rpg
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: my-great-rpg-${{ matrix.config.os }}${{ fromJSON('[".tar.gz", ".exe"]')[matrix.config.os == 'windows-latest'] }}
          asset_path: ./target/release/my-great-rpg${{ fromJSON('[".tar.gz", ".exe"]')[matrix.config.os == 'windows-latest'] }} # Quick hack: Ternary operation
          asset_content_type: application/octet-stream
